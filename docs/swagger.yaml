definitions:
  controller.CreateResourceVersionRequest:
    properties:
      category:
        type: string
      version_code:
        type: string
    type: object
  controller.CreateSessionRequest:
    properties:
      code:
        type: string
    type: object
  controller.EndAsAudienceRequest:
    properties:
      live_id:
        type: string
      user_id:
        type: string
    type: object
  controller.EndAsStreamerRequest:
    properties:
      live_id:
        type: string
    type: object
  controller.HappyBoxRequest:
    properties:
      item_id:
        type: integer
      send_quantity:
        type: integer
      streamer_mirrativ_id:
        type: string
    type: object
  controller.RollRequest:
    properties:
      times:
        type: integer
    type: object
  controller.StartAsAudienceRequest:
    properties:
      is_viewer_self_start:
        type: boolean
      live_id:
        type: string
      user_id:
        type: string
    type: object
  controller.StartAsStreamerRequest:
    properties:
      mirrativ_id:
        type: string
    type: object
  controller.enhanceCharacterCardRequest:
    properties:
      add_level:
        type: integer
    type: object
  controller.killEnemy:
    properties:
      count:
        type: integer
      enemy_id:
        type: integer
    type: object
  controller.panelMissionRequest:
    properties:
      group_kind:
        $ref: '#/definitions/entity.MissionGroupKind'
    type: object
  controller.questResultRequest:
    properties:
      combo_count:
        type: integer
      drop:
        items:
          $ref: '#/definitions/entity.RewardContent'
        type: array
      is_clear:
        type: boolean
      kill_enemy_count:
        items:
          $ref: '#/definitions/controller.killEnemy'
        type: array
      max_combo_count:
        type: integer
      piece_count:
        type: integer
      remaining_forces:
        type: integer
      special_piece_count:
        type: integer
      stock_gifts:
        items:
          $ref: '#/definitions/controller.stockGiftRequest'
        type: array
      tern_count:
        type: integer
    type: object
  controller.receiveAllMissionRequest:
    properties:
      mission_group_kind:
        $ref: '#/definitions/entity.MissionGroupKind'
    type: object
  controller.soloRaidResultRequest:
    properties:
      damage:
        type: integer
      over_attack:
        type: boolean
      stock_gift:
        items:
          $ref: '#/definitions/controller.stockGiftRequest'
        type: array
    type: object
  controller.soloRaidStartRequest:
    properties:
      over_attack:
        type: boolean
    type: object
  controller.stockGiftRequest:
    properties:
      stock:
        type: integer
      stock_gift_id:
        type: integer
    type: object
  controller.updateDeckRequest:
    properties:
      main_chara_card_id:
        type: integer
      slot_index:
        type: integer
      sub_chara_card_id:
        type: integer
    type: object
  controller.updateGiftStockRequest:
    properties:
      stock_gifts:
        items:
          $ref: '#/definitions/controller.stockGiftRequest'
        type: array
    type: object
  entity.ClearRewardType:
    enum:
    - FirstClear
    - ClearRankC
    - ClearRankB
    - ClearRankA
    - ClearRankS
    type: string
    x-enum-varnames:
    - ClearRewardFirstClear
    - ClearRewardRankC
    - ClearRewardRankB
    - ClearRewardRankA
    - ClearRewardRankS
  entity.ContentType:
    enum:
    - None
    - Item
    - Gold
    - StarExp
    - Bonus
    - EventStamina
    - PrizeSticker
    - CharacterCard
    type: string
    x-enum-varnames:
    - CONTENT_TYPE_NONE
    - CONTENT_TYPE_ITEM
    - CONTENT_TYPE_GOLD
    - CONTENT_TYPE_STAREXP
    - CONTENT_TYPE_BONUS
    - CONTENT_TYPE_EVENT_STAMINA
    - CONTENT_TYPE_PRIZE_STICKER
    - CONTENT_TYPE_CHARACTER_CARD
  entity.GiftType:
    enum:
    - Gacha
    - InGameAdvantagePieceChange
    - InGameHealPieceChange
    - InGameEncoreTime
    - InGameRandomGift
    - InGameMeteor
    type: string
    x-enum-comments:
      GiftTypeGacha: ガチャ
      GiftTypeInGameAdvantagePieceChange: 有利属性ピース生成
      GiftTypeInGameEncoreTime: アンコールタイム
      GiftTypeInGameHealPieceChange: 回復ピース生成
      GiftTypeInGameMeteor: メテオ
      GiftTypeInGameRandomGift: チャンスギフト
    x-enum-varnames:
    - GiftTypeGacha
    - GiftTypeInGameAdvantagePieceChange
    - GiftTypeInGameHealPieceChange
    - GiftTypeInGameEncoreTime
    - GiftTypeInGameRandomGift
    - GiftTypeInGameMeteor
  entity.MissionGroupKind:
    enum:
    - PanelBeginner
    - PanelEvent
    - Main
    - Daily
    - Event
    type: string
    x-enum-varnames:
    - MissionGroupKindPanelBeginner
    - MissionGroupKindPanelEvent
    - MissionGroupKindMain
    - MissionGroupKindDaily
    - MissionGroupKindEvent
  entity.QuestScoreRankType:
    enum:
    - none
    - C
    - B
    - A
    - S
    type: string
    x-enum-varnames:
    - QuestScoreRankNone
    - QuestScoreRankC
    - QuestScoreRankB
    - QuestScoreRankA
    - QuestScoreRankS
  entity.RankingKind:
    enum:
    - None
    - HighScore
    - TotalScore
    type: string
    x-enum-varnames:
    - RankingKindNone
    - RankingKindHighScore
    - RankingKindTotalScore
  entity.RewardContent:
    properties:
      contentId:
        type: integer
      contentQuantity:
        type: integer
      contentType:
        $ref: '#/definitions/entity.ContentType'
    type: object
  model.Adv:
    properties:
      id:
        type: integer
      is_lock:
        type: boolean
      is_readed:
        type: boolean
      main_adv_id:
        type: integer
    type: object
  model.AdvList:
    properties:
      advs:
        items:
          $ref: '#/definitions/model.Adv'
        type: array
    type: object
  model.AdvResult:
    properties:
      status:
        type: string
    type: object
  model.AdvStart:
    properties:
      id:
        type: integer
      main_adv_id:
        type: integer
    type: object
  model.AppError:
    properties:
      code:
        type: string
      message:
        type: string
    type: object
  model.CharacterCard:
    properties:
      awake_level:
        type: integer
      character_card_id:
        type: integer
      id:
        type: integer
      level:
        type: integer
    type: object
  model.CharacterCardEnhance:
    properties:
      character_card:
        $ref: '#/definitions/model.CharacterCard'
      gold:
        type: integer
      items:
        items:
          $ref: '#/definitions/model.Item'
        type: array
    type: object
  model.CharacterCardList:
    properties:
      character_cards:
        items:
          $ref: '#/definitions/model.CharacterCard'
        type: array
    type: object
  model.Checkin:
    properties:
      event_season:
        $ref: '#/definitions/model.CurrentEventSeason'
      id:
        type: integer
      rankings:
        items:
          $ref: '#/definitions/model.RankingResult'
        type: array
      solo_raid:
        $ref: '#/definitions/model.CurrentSoloRaid'
    type: object
  model.ConvertedContent:
    properties:
      character_card_awake:
        type: integer
      contents:
        items:
          $ref: '#/definitions/model.RewardContent'
        type: array
    type: object
  model.CurrentEventSeason:
    properties:
      end_at:
        type: string
      event_season_id:
        type: integer
      start_at:
        type: string
    type: object
  model.CurrentSoloRaid:
    properties:
      end_at:
        type: string
      is_all_clear:
        type: boolean
      solo_raid_id:
        type: integer
      start_at:
        type: string
    type: object
  model.Deck:
    properties:
      id:
        type: integer
      slots:
        items:
          $ref: '#/definitions/model.Slot'
        type: array
    type: object
  model.DeckList:
    properties:
      decks:
        items:
          $ref: '#/definitions/model.Deck'
        type: array
    type: object
  model.EventQuestResult:
    properties:
      recovery_at:
        type: string
      result:
        $ref: '#/definitions/model.QuestResult'
      stamina:
        type: integer
    type: object
  model.EventRanking:
    properties:
      rank:
        type: integer
      score:
        type: integer
      user:
        $ref: '#/definitions/model.User'
    type: object
  model.EventRankingList:
    properties:
      ranking_list:
        items:
          $ref: '#/definitions/model.EventRankings'
        type: array
    type: object
  model.EventRankings:
    properties:
      higher_rankings:
        items:
          $ref: '#/definitions/model.EventRanking'
        type: array
      my_ranking:
        $ref: '#/definitions/model.EventRanking'
      ranking_kind:
        $ref: '#/definitions/entity.RankingKind'
      rankings:
        items:
          $ref: '#/definitions/model.EventRanking'
        type: array
    type: object
  model.EventSeason:
    properties:
      end_at:
        type: string
      event_point:
        type: integer
      event_quests:
        items:
          $ref: '#/definitions/model.Quest'
        type: array
      event_season_id:
        type: integer
      ranking_list:
        items:
          $ref: '#/definitions/model.EventRankings'
        type: array
      recovery_at:
        type: string
      stamina:
        type: integer
      start_at:
        type: string
    type: object
  model.Gacha:
    properties:
      banner:
        type: string
      end_at:
        type: string
      id:
        type: integer
      name:
        type: string
      order:
        type: integer
      pay_content_id:
        type: integer
      pay_content_quantity:
        type: integer
      pay_content_type:
        $ref: '#/definitions/entity.ContentType'
      pickup_items:
        items:
          $ref: '#/definitions/model.RewardContent'
        type: array
      start_at:
        type: string
    type: object
  model.GachaResult:
    properties:
      converted_reward:
        $ref: '#/definitions/model.RewardContent'
      new_get:
        type: boolean
      reward:
        $ref: '#/definitions/model.RewardContent'
    type: object
  model.GachaResultList:
    properties:
      gacha_results:
        items:
          $ref: '#/definitions/model.GachaResult'
        type: array
    type: object
  model.GainResult:
    properties:
      converted_content:
        $ref: '#/definitions/model.ConvertedContent'
      is_new:
        type: boolean
      is_present:
        type: boolean
      reward_content:
        $ref: '#/definitions/model.RewardContent'
    type: object
  model.GainResultList:
    properties:
      gain_results:
        items:
          $ref: '#/definitions/model.GainResult'
        type: array
    type: object
  model.Gift:
    properties:
      coin:
        type: integer
      effect_kind:
        type: integer
      effect_value1:
        type: integer
      effect_value2:
        type: integer
      gift_stock_id:
        type: integer
      gift_type:
        $ref: '#/definitions/entity.GiftType'
      is_show_popup:
        type: boolean
      item_id:
        type: integer
      name:
        type: string
      sender:
        $ref: '#/definitions/model.GiftSender'
      sender_gacha_results:
        items:
          $ref: '#/definitions/model.RewardContent'
        type: array
      streamer_gacha_results:
        items:
          $ref: '#/definitions/model.RewardContent'
        type: array
    type: object
  model.GiftList:
    properties:
      gifts:
        items:
          $ref: '#/definitions/model.Gift'
        type: array
      type:
        type: string
    type: object
  model.GiftSender:
    properties:
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
    type: object
  model.HappyBoxResult:
    properties:
      item_quantity:
        type: integer
    type: object
  model.Header:
    properties:
      event_stamina:
        type: integer
      gift_event_stamina:
        type: integer
      gold:
        type: integer
      is_live:
        type: boolean
      is_rankup:
        type: boolean
      is_vip_rankup:
        type: boolean
      star_rank:
        type: integer
      star_rank_exp:
        type: integer
      vip_rank:
        type: integer
      vip_rank_exp:
        type: integer
    type: object
  model.Item:
    properties:
      id:
        type: integer
      image_id:
        type: string
      item_id:
        type: integer
      name:
        type: string
      quantity:
        type: integer
    type: object
  model.ItemList:
    properties:
      items:
        items:
          $ref: '#/definitions/model.Item'
        type: array
    type: object
  model.LoginBonusReward:
    properties:
      end_at:
        type: string
      login_bonus_id:
        type: integer
      login_bonus_reward_id:
        type: integer
      reward_content:
        items:
          $ref: '#/definitions/model.GainResult'
        type: array
      start_at:
        type: string
    type: object
  model.LoginBonusRewardList:
    properties:
      login_bonus_rewards:
        items:
          $ref: '#/definitions/model.LoginBonusReward'
        type: array
    type: object
  model.Mission:
    properties:
      id:
        type: integer
      mission_id:
        type: integer
      progress:
        type: integer
      state:
        $ref: '#/definitions/model.MissionState'
    type: object
  model.MissionGroup:
    properties:
      end_at:
        type: string
      kind:
        $ref: '#/definitions/entity.MissionGroupKind'
      mission_group_id:
        type: integer
      missions:
        items:
          $ref: '#/definitions/model.Mission'
        type: array
      start_at:
        type: string
    type: object
  model.MissionGroupList:
    properties:
      mission_groups:
        items:
          $ref: '#/definitions/model.MissionGroup'
        type: array
    type: object
  model.MissionState:
    enum:
    - unachieved
    - achieved
    - received
    type: string
    x-enum-varnames:
    - MISSION_STATE_UNACHIEVED
    - MISSION_STATE_ACHIEVED
    - MISSION_STATE_RECEIVED
  model.Oshirase:
    properties:
      alternative_published_at:
        type: string
      banner_image_id:
        type: string
      display_order:
        type: integer
      id:
        type: integer
      kind:
        type: integer
      message:
        type: string
      postscript_at:
        type: string
      postscript_count:
        type: integer
      title:
        type: string
    type: object
  model.PanelMission:
    properties:
      panel_mission_id:
        type: integer
      progress:
        type: integer
      reward_contents:
        items:
          $ref: '#/definitions/model.GainResult'
        type: array
      state:
        $ref: '#/definitions/model.MissionState'
    type: object
  model.PanelMissionGroup:
    properties:
      end_at:
        type: string
      kind:
        $ref: '#/definitions/entity.MissionGroupKind'
      missions:
        items:
          $ref: '#/definitions/model.PanelMission'
        type: array
      panel_mission_group_id:
        type: integer
      reward_contents:
        items:
          $ref: '#/definitions/model.GainResult'
        type: array
      start_at:
        type: string
    type: object
  model.PresentBox:
    properties:
      condition:
        type: string
      end_at:
        type: string
      id:
        type: integer
      received_at:
        type: string
      reward:
        $ref: '#/definitions/model.RewardContent'
    type: object
  model.PresentBoxList:
    properties:
      max_page:
        type: integer
      present_boxs:
        items:
          $ref: '#/definitions/model.PresentBox'
        type: array
    type: object
  model.Quest:
    properties:
      high_score:
        type: integer
      id:
        type: integer
      is_clear:
        type: boolean
      quest_id:
        type: integer
      rank:
        $ref: '#/definitions/entity.QuestScoreRankType'
      un_lock:
        type: boolean
    type: object
  model.QuestClearReward:
    properties:
      reward_type:
        $ref: '#/definitions/entity.ClearRewardType'
      rewards:
        items:
          $ref: '#/definitions/model.GainResult'
        type: array
    type: object
  model.QuestGroup:
    properties:
      id:
        type: integer
      quest_group_id:
        type: integer
      un_lock:
        type: boolean
    type: object
  model.QuestGroupList:
    properties:
      quest_groups:
        items:
          $ref: '#/definitions/model.QuestGroup'
        type: array
    type: object
  model.QuestList:
    properties:
      quests:
        items:
          $ref: '#/definitions/model.Quest'
        type: array
    type: object
  model.QuestResult:
    properties:
      clear_rewards:
        items:
          $ref: '#/definitions/model.QuestClearReward'
        type: array
      drop_reward:
        items:
          $ref: '#/definitions/model.GainResult'
        type: array
      id:
        type: integer
      is_clear:
        type: boolean
      quest_id:
        type: integer
      rank:
        $ref: '#/definitions/entity.QuestScoreRankType'
      score:
        type: integer
    type: object
  model.QuestStart:
    properties:
      id:
        type: integer
      quest_id:
        type: integer
      stock_gift:
        $ref: '#/definitions/model.GiftList'
    type: object
  model.RankingResult:
    properties:
      rank:
        type: integer
      ranking_group_id:
        type: integer
      score:
        type: integer
    type: object
  model.ReceiveResults:
    properties:
      results:
        items:
          $ref: '#/definitions/model.GainResult'
        type: array
    type: object
  model.ResourceVersion:
    properties:
      category:
        type: string
      id:
        type: integer
      resource_url:
        type: string
      version_code:
        type: string
    type: object
  model.ResourceVersionList:
    properties:
      resource_versions:
        items:
          $ref: '#/definitions/model.ResourceVersion'
        type: array
    type: object
  model.RewardContent:
    properties:
      content_id:
        type: integer
      content_quantity:
        type: integer
      content_type:
        $ref: '#/definitions/entity.ContentType'
    type: object
  model.Session:
    properties:
      gold:
        type: integer
      iv:
        type: string
      key:
        type: string
      live:
        type: boolean
      mirrativ_id:
        type: string
      name:
        type: string
      profile_url:
        type: string
      start_type:
        type: string
      streamer:
        $ref: '#/definitions/model.User'
      token:
        type: string
      user_id:
        type: integer
      user_kind:
        type: integer
    type: object
  model.Slot:
    properties:
      main_character_card_id:
        type: integer
      support_character_card_id:
        type: integer
    type: object
  model.SoloRaid:
    properties:
      damage:
        type: integer
      end_at:
        type: string
      id:
        type: integer
      recovery_at:
        type: string
      solo_raid_boss_id:
        type: integer
      solo_raid_id:
        type: integer
      stamina:
        type: integer
      start_at:
        type: string
    type: object
  model.SoloRaidResult:
    properties:
      contents:
        items:
          $ref: '#/definitions/model.GainResult'
        type: array
      damage:
        type: integer
      id:
        type: integer
      is_kill:
        type: boolean
      new_solo_raid_boss_id:
        type: integer
      solo_raid_boss_id:
        type: integer
      solo_raid_id:
        type: integer
      stamina:
        type: integer
    type: object
  model.SoloRaidStart:
    properties:
      damage:
        type: integer
      id:
        type: integer
      solo_raid_boss_id:
        type: integer
      solo_raid_id:
        type: integer
      stock_gift:
        $ref: '#/definitions/model.GiftList'
    type: object
  model.SubQuest:
    properties:
      high_score:
        type: integer
      id:
        type: integer
      is_clear:
        type: boolean
      rank:
        $ref: '#/definitions/entity.QuestScoreRankType'
      sub_quest_id:
        type: integer
    type: object
  model.SubQuestGroup:
    properties:
      end_at:
        type: string
      id:
        type: integer
      play_count:
        type: integer
      start_at:
        type: string
      sub_quest_group_id:
        type: integer
    type: object
  model.SubQuestGroupList:
    properties:
      sub_quest_groups:
        items:
          $ref: '#/definitions/model.SubQuestGroup'
        type: array
    type: object
  model.SubQuestList:
    properties:
      sub_quest_group:
        $ref: '#/definitions/model.SubQuestGroup'
      sub_quests:
        items:
          $ref: '#/definitions/model.SubQuest'
        type: array
    type: object
  model.SubQuestResult:
    properties:
      play_limit:
        type: integer
      result:
        $ref: '#/definitions/model.QuestResult'
    type: object
  model.User:
    properties:
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
    type: object
  model.UserOshirase:
    properties:
      id:
        type: integer
      is_read:
        type: boolean
      oshirase:
        $ref: '#/definitions/model.Oshirase'
    type: object
  model.UserOshiraseList:
    properties:
      max_page:
        type: integer
      oshirases:
        items:
          $ref: '#/definitions/model.UserOshirase'
        type: array
    type: object
  service.CheatCreateUser:
    properties:
      error:
        $ref: '#/definitions/service.MirrativApiError'
      user:
        $ref: '#/definitions/service.MirrativApiUser'
    type: object
  service.CheatEndAsAudience:
    properties:
      error:
        $ref: '#/definitions/service.MirrativApiError'
    type: object
  service.CheatEndAsStreamer:
    properties:
      error:
        $ref: '#/definitions/service.MirrativApiError'
    type: object
  service.CheatStartAsAudience:
    properties:
      code:
        type: string
      error:
        $ref: '#/definitions/service.MirrativApiError'
    type: object
  service.CheatStartAsStreamer:
    properties:
      code:
        type: string
      error:
        $ref: '#/definitions/service.MirrativApiError'
      live:
        $ref: '#/definitions/service.MirrativApiLive'
    type: object
  service.MirrativApiError:
    properties:
      code:
        type: string
      reason:
        type: string
      text:
        type: string
    type: object
  service.MirrativApiLive:
    properties:
      id:
        type: string
      started_at:
        type: string
      user:
        $ref: '#/definitions/service.MirrativApiUser'
    type: object
  service.MirrativApiUser:
    properties:
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
    type: object
info:
  contact: {}
  description: STARS APIドキュメント
  title: STARS API
  version: "1.0"
paths:
  /api/debug/endasaudience:
    post:
      consumes:
      - application/json
      description: ユーザーIDを入力して視聴終了
      parameters:
      - description: リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.EndAsAudienceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.CheatEndAsAudience'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      summary: ユーザーIDを入力して視聴終了
      tags:
      - Debug
  /api/debug/endasstreamer:
    post:
      consumes:
      - application/json
      description: ユーザーIDを入力して配信終了
      parameters:
      - description: リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.EndAsStreamerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.CheatEndAsStreamer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      summary: ユーザーIDを入力して配信終了
      tags:
      - Debug
  /api/debug/mirrativuser:
    post:
      consumes:
      - application/json
      description: ミラティブユーザー作成
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.CheatCreateUser'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      summary: ミラティブユーザー作成
      tags:
      - Debug
  /api/debug/resourceversion:
    post:
      consumes:
      - application/json
      description: リソースバージョン作成
      parameters:
      - description: リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.CreateResourceVersionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      summary: リソースバージョン作成
      tags:
      - Debug
  /api/debug/startasaudience:
    post:
      consumes:
      - application/json
      description: ユーザーIDとライブIDを入力して視聴開始
      parameters:
      - description: リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.StartAsAudienceRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.CheatStartAsAudience'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      summary: ユーザーIDとライブIDを入力して視聴開始
      tags:
      - Debug
  /api/debug/startasstreamer:
    post:
      consumes:
      - application/json
      description: MirrativIdを入力して配信開始
      parameters:
      - description: リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.StartAsStreamerRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/service.CheatStartAsStreamer'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      summary: MirrativIdを入力して配信開始
      tags:
      - Debug
  /api/my/advs:
    get:
      consumes:
      - application/json
      description: Adv一覧を取得します
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AdvList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: Adv一覧取得
      tags:
      - Adv
  /api/my/advs/{id}/result:
    post:
      consumes:
      - application/json
      description: Advの結果を取得します
      parameters:
      - description: UserMainAdvID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AdvResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: Adv結果
      tags:
      - Adv
  /api/my/advs/{id}/start:
    post:
      consumes:
      - application/json
      description: Advを開始します
      parameters:
      - description: UserMainAdvID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.AdvStart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: Adv開始
      tags:
      - Adv
  /api/my/character-cards:
    get:
      consumes:
      - application/json
      description: 所持キャラカード一覧
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CharacterCardList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: 所持キャラカード一覧
      tags:
      - CharacterCard
  /api/my/character-cards/{id}/enhance:
    post:
      consumes:
      - application/json
      description: キャラカード強化
      parameters:
      - description: UserCharacterCardID
        in: path
        name: id
        required: true
        type: integer
      - description: リクエスト
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.enhanceCharacterCardRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.CharacterCardEnhance'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: キャラカード強化
      tags:
      - CharacterCard
  /api/my/checkin:
    post:
      consumes:
      - application/json
      description: チェックイン
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Checkin'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: チェックイン
      tags:
      - Checkin
  /api/my/decks/{id}/update:
    post:
      consumes:
      - application/json
      description: デッキの更新
      parameters:
      - description: UserDeckID
        in: path
        name: id
        required: true
        type: integer
      - description: リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.updateDeckRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Deck'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: デッキの更新
      tags:
      - Deck
  /api/my/decks/list:
    get:
      consumes:
      - application/json
      description: デッキ一覧の取得
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.DeckList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: デッキ一覧の取得
      tags:
      - Deck
  /api/my/event-quest/{id}/result:
    post:
      consumes:
      - application/json
      description: イベントシーズン結果
      parameters:
      - description: UserEventQuestID
        in: path
        name: id
        required: true
        type: integer
      - description: リクエスト
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.questResultRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.EventQuestResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: イベントシーズン結果
      tags:
      - EventSeason
  /api/my/event-quest/{id}/start:
    post:
      consumes:
      - application/json
      description: イベントシーズン開始
      parameters:
      - description: UserEventQuestID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.QuestStart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: イベントシーズン開始
      tags:
      - EventSeason
  /api/my/event-season:
    get:
      consumes:
      - application/json
      description: イベントシーズン情報の取得
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.EventSeason'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: イベントシーズン情報の取得
      tags:
      - EventSeason
  /api/my/event-season/{id}/ranking:
    get:
      consumes:
      - application/json
      description: イベントランキング情報の取得
      parameters:
      - description: EventSeasonID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.EventRankingList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: イベントランキング情報の取得
      tags:
      - EventSeason
  /api/my/gachas/{id}/roll:
    post:
      consumes:
      - application/json
      description: ガチャを回す
      parameters:
      - description: ガチャID
        in: path
        name: id
        required: true
        type: integer
      - description: リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.RollRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GachaResultList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ガチャを回す
      tags:
      - Gacha
  /api/my/gachas/list:
    get:
      consumes:
      - application/json
      description: ガチャ一覧の取得
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Gacha'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ガチャ一覧の取得
      tags:
      - Gacha
  /api/my/gift-stocks:
    get:
      consumes:
      - application/json
      description: ストックギフト一覧
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ストックギフト一覧
      tags:
      - Gift
    put:
      consumes:
      - application/json
      description: ストックギフト消費
      parameters:
      - description: リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.updateGiftStockRequest'
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ストックギフト消費
      tags:
      - Gift
  /api/my/happybox/checkin:
    post:
      consumes:
      - application/json
      description: チェックイン(ハッピーボックス用)
      produces:
      - application/json
      responses:
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: チェックイン(ハッピーボックス用)
      tags:
      - HappyBox
  /api/my/happybox/roll:
    post:
      consumes:
      - application/json
      description: ハッピーボックスを回す
      parameters:
      - description: リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.HappyBoxRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.HappyBoxResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ハッピーボックスを回す
      tags:
      - HappyBox
  /api/my/header:
    get:
      consumes:
      - application/json
      description: ヘッダー情報の取得
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Header'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ヘッダー情報の取得
      tags:
      - Header
  /api/my/items:
    get:
      consumes:
      - application/json
      description: アイテム一覧を取得する
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ItemList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: アイテム一覧を取得する
      tags:
      - Item
  /api/my/items/happybox:
    get:
      consumes:
      - application/json
      description: ハッピーボックス一覧を取得する
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ItemList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ハッピーボックス一覧を取得する
      tags:
      - Item
  /api/my/login-bonuses:
    get:
      consumes:
      - application/json
      description: ログインボーナスの取得
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.LoginBonusRewardList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ログインボーナスの取得
      tags:
      - LoginBonus
  /api/my/missions:
    get:
      consumes:
      - application/json
      description: ミッション一覧の取得
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.MissionGroupList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ミッション一覧の取得
      tags:
      - Mission
  /api/my/missions/{id}/receive:
    post:
      consumes:
      - application/json
      description: ミッションの受け取り
      parameters:
      - description: UserMissionID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GainResultList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ミッションの受け取り
      tags:
      - Mission
  /api/my/missions/receive-all:
    post:
      consumes:
      - application/json
      description: ミッションの一括受け取り
      parameters:
      - description: リクエスト
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.receiveAllMissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.GainResultList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ミッションの一括受け取り
      tags:
      - Mission
  /api/my/oshirases:
    get:
      consumes:
      - application/json
      description: お知らせ取得
      parameters:
      - description: "0"
        in: query
        name: page
        type: integer
      - description: カテゴリー
        in: query
        name: category
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserOshiraseList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: お知らせ取得
      tags:
      - Oshirase
  /api/my/oshirases/{id}/read:
    put:
      consumes:
      - application/json
      description: お知らせ読了
      parameters:
      - description: user oshirase id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.UserOshirase'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: お知らせ読了
      tags:
      - Oshirase
  /api/my/panel-mission:
    post:
      consumes:
      - application/json
      description: パネルミッション取得
      parameters:
      - description: リクエスト
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.panelMissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PanelMissionGroup'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: パネルミッション取得
      tags:
      - PanelMission
  /api/my/presentbox:
    get:
      consumes:
      - application/json
      description: プレゼントボックス取得
      parameters:
      - description: "0"
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PresentBoxList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: プレゼントボックス取得
      tags:
      - PresentBox
  /api/my/presentbox/{id}/receive:
    post:
      consumes:
      - application/json
      description: プレゼント受け取り
      parameters:
      - description: "0"
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ReceiveResults'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: プレゼント受け取り
      tags:
      - PresentBox
  /api/my/presentbox/history:
    get:
      consumes:
      - application/json
      description: プレゼント履歴取得
      parameters:
      - description: "0"
        in: query
        name: page
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.PresentBoxList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: プレゼント履歴取得
      tags:
      - PresentBox
  /api/my/presentbox/receiveall:
    post:
      consumes:
      - application/json
      description: 全てのプレゼント受け取り
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ReceiveResults'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: 全てのプレゼント受け取り
      tags:
      - PresentBox
  /api/my/quest-groups:
    get:
      consumes:
      - application/json
      description: クエストグループ一覧の取得
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.QuestGroupList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: クエストグループ一覧の取得
      tags:
      - Quest
  /api/my/quest-groups/{id}/quests:
    get:
      consumes:
      - application/json
      description: クエスト一覧の取得
      parameters:
      - description: UserQuestGroupID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.QuestList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: クエスト一覧の取得
      tags:
      - Quest
  /api/my/quests/{id}/result:
    post:
      consumes:
      - application/json
      description: クエスト結果
      parameters:
      - description: UserQuestID
        in: path
        name: id
        required: true
        type: integer
      - description: リクエスト
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.questResultRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.QuestResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: クエスト結果
      tags:
      - Quest
  /api/my/quests/{id}/start:
    post:
      consumes:
      - application/json
      description: クエスト開始
      parameters:
      - description: UserQuestID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.QuestStart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: クエスト開始
      tags:
      - Quest
  /api/my/solo-raid:
    get:
      consumes:
      - application/json
      description: ソロレイド情報の取得
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SoloRaid'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ソロレイド情報の取得
      tags:
      - SoloRaid
  /api/my/solo-raid/{id}/result:
    post:
      consumes:
      - application/json
      description: ソロレイド結果
      parameters:
      - description: UserSoloRaidID
        in: path
        name: id
        required: true
        type: integer
      - description: リクエスト
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.soloRaidResultRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SoloRaidResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ソロレイド結果
      tags:
      - SoloRaid
  /api/my/solo-raid/{id}/start:
    post:
      consumes:
      - application/json
      description: ソロレイド開始
      parameters:
      - description: UserSoloRaidID
        in: path
        name: id
        required: true
        type: integer
      - description: リクエスト
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.soloRaidStartRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SoloRaidStart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: ソロレイド開始
      tags:
      - SoloRaid
  /api/my/sub-quest-groups:
    get:
      consumes:
      - application/json
      description: サブクエストグループ一覧の取得
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SubQuestGroupList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: サブクエストグループ一覧の取得
      tags:
      - SubQuest
  /api/my/sub-quest-groups/{id}/quests:
    get:
      consumes:
      - application/json
      description: サブクエスト一覧の取得
      parameters:
      - description: UserSubQuestGroupID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SubQuestList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: サブクエスト一覧の取得
      tags:
      - SubQuest
  /api/my/sub-quests/{id}/result:
    post:
      consumes:
      - application/json
      description: サブクエスト結果
      parameters:
      - description: UserSubQuestID
        in: path
        name: id
        required: true
        type: integer
      - description: リクエスト
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/controller.questResultRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.SubQuestResult'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: サブクエスト結果
      tags:
      - SubQuest
  /api/my/sub-quests/{id}/start:
    post:
      consumes:
      - application/json
      description: サブクエスト開始
      parameters:
      - description: UserSubQuestID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.QuestStart'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      security:
      - Bearer: []
      summary: サブクエスト開始
      tags:
      - SubQuest
  /api/resourceversion:
    get:
      consumes:
      - application/json
      description: リソースバージョンを取得
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.ResourceVersionList'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      summary: リソースバージョンを取得
      tags:
      - ResourceVersion
  /api/sessions:
    post:
      consumes:
      - application/json
      description: セッション作成
      parameters:
      - description: リクエスト
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/controller.CreateSessionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Session'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/model.AppError'
      summary: セッション作成
      tags:
      - Session
securityDefinitions:
  Bearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
